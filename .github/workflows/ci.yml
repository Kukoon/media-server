name: Build Server

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: {}

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-go@v2
    - name: Install misspell
      run: go get github.com/client9/misspell/cmd/misspell
      env:
        GOPATH: /home/runner/go
    - name: Check misspell
      run: find . -type f | grep -v webroot/assets | xargs /home/runner/go/bin/misspell -error -i "autor,esoterisch"
    - name: Check if format is correct
      run: .ci/check-gofmt
    - name: Check that every package has a testfiles
      run: .ci/check-testfiles
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: root
          POSTGRES_PASSWORD: root
          POSTGRES_DB: media_server
        ports:
        - 26257:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-go@v2
    - name: Install swag
      run: go get -u github.com/swaggo/swag/cmd/swag
      env:
        GOPATH: /home/runner/go
    - name: Generate Docs
      run: /home/runner/go/bin/swag init --parseDependency --parseDepth 2 --parseInternal -g web/docs.go -o web/docs
    - name: Test
      run: go test -ldflags "-X dev.sum7.eu/genofire/golang-lib/web/webtest.DBConnection=postgres://root:root@localhost:26257/media_server?sslmode=disable" $(go list ./... | grep -v /vendor/) -v -failfast -p 1 -coverprofile .testCoverage.txt
    - name: Show Coverage
      run: go tool cover -func=".testCoverage.txt"
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - uses: actions/setup-go@v2
    - name: Install swag
      run: go get -u github.com/swaggo/swag/cmd/swag
      env:
        GOPATH: /home/runner/go
    - name: Generate Docs
      run: /home/runner/go/bin/swag init --parseDependency --parseDepth 2 --parseInternal -g web/docs.go -o web/docs
    - name: Build
      run: go build -ldflags "-X main.VERSION=$(git describe --tags)" -v
    - name: Archive build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: build
        path: media-server
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs:
      - lint
      - test
      - build
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: build
          path: build/
      - name: Upload to Server
        uses: up9cloud/action-rsync@master
        env:
          USER: ${{secrets.DEPLOY_SSH_USER}}
          HOST: ${{secrets.DEPLOY_SSH_HOST}}
          KEY: ${{secrets.DEPLOY_SSH_KEY}}
          ARGS: -rzh -O --delete-after
          SSH_ARGS: '-p ${{secrets.DEPLOY_SSH_PORT}} -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no'
          SOURCE: build/media-server
          TARGET: /
